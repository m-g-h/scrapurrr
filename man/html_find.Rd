% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scraping_helpers.R
\name{html_find}
\alias{html_find}
\title{Find and return the node(s) in a \code{xml_nodeset} that match a regex pattern}
\usage{
html_find(nodelist, regex, inc = 0)
}
\arguments{
\item{nodelist}{\code{xml_nodeset}, as e.g. returned from
\code{\link[rvest]{html_elements}}.}

\item{regex}{\code{string scalar} giving the regular expression to search for.
See the stringr cheatsheet on \url{https://www.rstudio.com/resources/cheatsheets/}}

\item{inc}{\code{numeric scalar}. Increment added to the returned index. See
examples for a use case.}
}
\value{
Returns a \code{xml_nodeset}
}
\description{
Find and return the node(s) in a \code{xml_nodeset} that match a regex pattern
}
\examples{
library(rvest)
library(webscraping)

# Lets suppose we want to know the owner of "Alfreds Futterkiste":
html = "<table>
  <tr>
    <th>Company</th>
    <th>Contact</th>
    <th>Country</th>
  </tr>
  <tr>
    <td>Alfreds Futterkiste</td>
    <td>Maria Anders</td>
    <td>Germany</td>
  </tr>
  <tr>
    <td>Centro comercial Moctezuma</td>
    <td>Francisco Chang</td>
    <td>Mexico</td>
  </tr>
</table>" \%>\%
  read_html()

# Searching for `td` elements returns a list:
html_elements(x = html, "td")
# Of course we could match by position, but it may not be fixed if we have
# many tables. Let's use `node_which()`. since the "owner" is always two rows
# behind the "company" we increment by 1:
html_elements(x = html, "td") \%>\%
  html_find("Alfreds Futterkiste", inc = 1)
}
